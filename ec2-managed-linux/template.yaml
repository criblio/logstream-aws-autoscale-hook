 # Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 #
 # Permission is hereby granted, free of charge, to any person obtaining a copy of this
 # software and associated documentation files (the "Software"), to deal in the Software
 # without restriction, including without limitation the rights to use, copy, modify,
 # merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
 # permit persons to whom the Software is furnished to do so.
 #
 # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 # INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 # PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 # HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 # OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 # SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  amazon-ec2-autoscaling-lifecycle-hook-lambda-linux-example
  
  Sample CloudFormation template that deploys an Auto Scaling Group with Lifecycle Hooks that are managed from a Lambda function. 

Parameters:
  AmiId:
    Description: AMI Id
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  AutoScalingGroupName:
    Description: TBD
    Type: String
    Default: Cribl Worker Group Autoscaling Group
  AutoScalingGroupMinSize:
    Description: TBD
    Type: Number
    Default: 1
  AutoScalingGroupMaxSize:
    Description: TBD
    Type: Number
    Default: 4
  AutoScalingGroupDesiredCapacity:
    Description: TBD
    Type: Number
    Default: 1
  CriblLeaderHost:
    Description: Hostname/IP Address for the worker group to use to connect to the leader node.
    Type: String
  CriblLeaderPort:
    Description: TCP Port for the worker group to use to connect to the leader node.
    Type: Number
    Default: 4200
  CriblLeaderToken:
    Description: Auth Token for the worker group to use to connect to the leader node.
    Type: String
    Default: "criblmaster"
  HeartbeatTimeout:
    Description: Time (in seconds) to wait before timing out (defaults to 3600 seconds)
    Type: Number
    Default: 3600
  InstanceType:
    Description: Amazon EC2 Instance Type
    Type: String
    Default: "t2.micro"
  InstanceKeyPair: 
    Description: Amazon EC2 Key Pair
    Type: "AWS::EC2::KeyPair::KeyName"
  InstanceSecurityGroup:
    Description: AWS Security Group for the Instances
    Type: AWS::EC2::SecurityGroup::Id
  LifecycleHookName:
    Description: TBD
    Type: String
    Default: "Cribl-Scaledown-Hook"
  Queues:
    Description: List of Paths to check for queue data - separated by commas.
    Type: String
    Default: "/opt/cribl/state/queues"
  SubnetIDs:
    Description: List of Subnet ID's that the instances should spin up in"
    Type: List<AWS::EC2::Subnet::Id>

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups:
    - 
      Label: 
        default: "VPC Configuration"
      Parameters: 
        - SubnetIDs
    -
      Label:
        default: "LogStream Configuration"
      Parameters:
        - CriblLeaderHost
        - CriblLeaderPort
        - CriblLeaderToken
    -
      Label:
        default: "Instance Configuration"
      Parameters:
        - AmiId
        - InstanceType
        - InstanceKeyPair 
    -
      Label: 
        default: "Auto Scaling Group Configuration"
      Parameters: 
        - AutoScalingGroupName
        - AutoScalingGroupVpcID
        - AutoScalingGroupSubnetIDs
        - AutoScalingGroupMinSize
        - AutoScalingGroupMaxSize
        - AutoScalingGroupDesiredCapacity
        - LifecycleHookName

Resources:

  # Instance/Auto Scaling Group Resources
  ec2Manager:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref InstanceKeyPair
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId: !Select [ 0, !Ref SubnetIDs ]
      IamInstanceProfile: !Ref ec2MgrInstanceProfile
      UserData: 
        'Fn::Base64': 
          !Sub 
            - |- 
              Content-Type: multipart/mixed; boundary="//"
              MIME-Version: 1.0

              --//
              Content-Type: text/cloud-config; charset="us-ascii"
              MIME-Version: 1.0
              Content-Transfer-Encoding: 7bit
              Content-Disposition: attachment; filename="cloud-config.txt"

              #cloud-config
              cloud_final_modules:
              - [scripts-user, always]

              --//
              Content-Type: text/x-shellscript; charset="us-ascii"
              MIME-Version: 1.0
              Content-Transfer-Encoding: 7bit
              Content-Disposition: attachment; filename="userdata.txt"

              #!/bin/bash -x

              yum install -y jq
              aws configure set region `curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region`

              # install the check script
              pip3 install boto3
              curl -o /opt/check-queue.py https://cdn.cribl.io/scripts/check-queue.py
              chmod 755 /opt/check-queue.py
              
              # Set Up Crontab
              crontab -l 2>&1 > /dev/null
              if [ $? -ne 0 ]; then
                echo "* * * * * QUEUES=${Queues} QUEUE_URL=${QueueURL} /opt/check-queue.py >> /var/log/check-queue.log" | crontab -
              else
                echo "$(crontab -l; echo \"* * * * * QUEUE_URL=${QueueURL} /opt/check-queue.py >> /var/log/check-queue.log\")" | crontab -
              fi
  

              --//
            - { 
                autoScalingGroupName: !Ref AutoScalingGroupName,
                lifecycleHookName: !Ref LifecycleHookName,
                QueueURL: !Ref LifecycleQueue
              }



  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        KeyName: !Ref InstanceKeyPair
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        IamInstanceProfile:
          Arn: !GetAtt
            - InstanceProfile
            - Arn
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Ref LifecycleHookName            
        UserData: 
          'Fn::Base64': 
            !Sub 
              - |- 
                Content-Type: multipart/mixed; boundary="//"
                MIME-Version: 1.0

                --//
                Content-Type: text/cloud-config; charset="us-ascii"
                MIME-Version: 1.0
                Content-Transfer-Encoding: 7bit
                Content-Disposition: attachment; filename="cloud-config.txt"

                #cloud-config
                cloud_final_modules:
                - [scripts-user, always]

                --//
                Content-Type: text/x-shellscript; charset="us-ascii"
                MIME-Version: 1.0
                Content-Transfer-Encoding: 7bit
                Content-Disposition: attachment; filename="userdata.txt"

                #!/bin/bash
                rpm -q stress &> /dev/null
                if [ $? -ne 0 ]
                  then
                    sudo amazon-linux-extras install epel -y
                    sudo yum install stress -y
                fi
                # Install and run LogStream
                # Set up cribl user and group
                groupadd -g 9000 cribl
                useradd -u 9000 -g 9000 cribl

                # Download and extract logstream tarball
                curl -Lso - $(curl https://cdn.cribl.io/dl/latest-x64) | (cd /opt; tar zxf -)
                
                # Change ownership of the tree to cribl:cribl
                chown -R 9000:9000 /opt/cribl
                
                su -c "/opt/cribl/bin/cribl mode-worker -H ${CriblLeaderHost} -p ${CriblLeaderPort} -u ${CriblLeaderToken}" cribl
                #chown -R 9000:9000 /opt/cribl
                /opt/cribl/bin/cribl boot-start enable -u cribl
                service cribl start
                if [ ! -d /opt/cribl/scripts ]; then
                  mkdir /opt/cribl/scripts
                  chown 9000:9000 /opt/cribl/scripts
                fi
                curl -o /opt/cribl/scripts/check_files.sh  https://cdn.cribl.io/scripts/check_files.sh
                chown 9000:9000 /opt/cribl/scripts/check_files.sh
                chmod 755 /opt/cribl/scripts/check_files.sh

                --//
              - { 
                  autoScalingGroupName: !Ref AutoScalingGroupName,
                  lifecycleHookName: !Ref LifecycleHookName
                }

  InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:           
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  InstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - 
          Ref: "InstanceRole"

  ec2MgrInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - 
          Ref: "EC2ManagerRole"

  AutoScalingGroup:    
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: !Ref AutoScalingGroupName
      LaunchTemplate: 
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      DesiredCapacity: !Ref AutoScalingGroupDesiredCapacity
      MaxSize: !Ref AutoScalingGroupMaxSize
      MinSize: !Ref AutoScalingGroupMinSize
      VPCZoneIdentifier: !Ref SubnetIDs

  LifecycleQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ASG_LifeCycle_Queue

  LifecycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      LifecycleHookName: !Ref LifecycleHookName
      AutoScalingGroupName: !Ref AutoScalingGroup
      DefaultResult: ABANDON
      HeartbeatTimeout: 900
      LifecycleTransition: "autoscaling:EC2_INSTANCE_TERMINATING"
      NotificationTargetARN: !GetAtt [ "LifecycleQueue", "Arn" ]
      RoleARN: !GetAtt [ "LifeCycleRole", "Arn" ]

  LifeCycleRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: autoscaling.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole
  EC2ManagerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LifecycleFunctionLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        - PolicyName: LifecycleFunctionCompleteLifecycleActionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "autoscaling:CompleteLifecycleAction"
                Resource: !Sub "arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${AutoScalingGroupName}"
        - PolicyName: LifecycleFunctionSSMSendCommandDocumentPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "ssm:SendCommand"
                Resource: !Sub "arn:aws:ssm:${AWS::Region}::document/AWS-RunShellScript"
        - PolicyName: LifecycleFunctionSSMSendCommandInstancePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "ssm:SendCommand"
                Resource: "arn:aws:ec2:*:*:instance/*"
                Condition:
                  StringEquals:
                    ssm:ResourceTag/aws:autoscaling:groupName:
                      - !Ref AutoScalingGroup
        - PolicyName: LifecycleFunctionSSMGetCommandInvocationPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "ssm:GetCommandInvocation"
                Resource: "*"
        - PolicyName: LifeCycleScriptSQS
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                Resource: !GetAtt [ "LifecycleQueue", "Arn" ]




